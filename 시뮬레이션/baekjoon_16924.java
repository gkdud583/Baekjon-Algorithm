import java.util.HashSet;import java.util.Scanner;class Location {  private int y;  private int x;  public Location(int y, int x) {    this.y = y;    this.x = x;  }  public int getY() {    return y;  }  public int getX() {    return x;  }}public class baekjoon_16924 {  public static final int DY[] = {-1, 1, 0, 0};  public static final int DX[] = {0, 0, -1, 1};  public static boolean map[][];  public static int answerSize;  public static StringBuffer sb = new StringBuffer();  public static void main(String[] args) {    Scanner sc = new Scanner(System.in);    String[] input = sc.nextLine().split(" ");    int R = Integer.parseInt(input[0]);    int C = Integer.parseInt(input[1]);    map = new boolean[R + 1][C + 1];    for (int i = 1; i <= R; i++) {      input = sc.nextLine().split("");      for (int j = 1; j <= C; j++) {        if (input[j - 1].equals(".")) {          map[i][j] = false;          continue;        }        map[i][j] = true;      }    }    boolean checked[][] = new boolean[R + 1][C + 1];    for (int i = 1; i <= R; i++) {      for (int j = 1; j <= C; j++) {        if (map[i][j]) {          checkCross(i, j, R, C, checked);        }      }    }    if (!isSolved(R, C, checked)) {      System.out.println(-1);    } else {      System.out.println(answerSize);      System.out.println(sb);    }  }  private static void checkCross(int y, int x, int R, int C, boolean checked[][]) {    int size = 1;    boolean[][] tempChecked = new boolean[R + 1][C + 1];    while (size < R * C) {      boolean isFail = false;      for (int i = 0; i < 4; i++) {        if (!check(i, size, y, x, R, C, tempChecked)) {          isFail = true;          break;        }      }      if (isFail) {        break;      }      copyArray(checked, tempChecked, R, C);      checked[y][x] = true;      answerSize++;      sb.append(y).append(" ").append(x).append(" ").append(size).append("\n");      size++;    }  }  private static void copyArray(boolean[][] dest, boolean[][] src, int R, int C) {    for (int i = 1; i <= R; i++) {      for (int j = 1; j <= C; j++) {        if (src[i][j]) {          dest[i][j] = src[i][j];        }      }    }  }  private static boolean check(int i, int s, int y, int x, int R, int C, boolean checked[][]) {    HashSet<Location> locations = new HashSet<>();    int ny = y;    int nx = x;    for (int j = 0; j < s; j++) {      ny = ny + DY[i];      nx = nx + DX[i];      if (isOutOfArray(ny, nx, R, C)) {        return false;      }      if (!map[ny][nx]) {        return false;      }      locations.add(new Location(ny, nx));    }    for (Location location : locations) {      checked[location.getY()][location.getX()] = true;    }    return true;  }  private static boolean isOutOfArray(int y, int x, int R, int C) {    if (y < 1 || x < 1 || y > R || x > C) {      return true;    }    return false;  }  private static boolean isSolved(int R, int C, boolean checked[][]) {    for (int i = 1; i <= R; i++) {      for (int j = 1; j <= C; j++) {        if (map[i][j] && !checked[i][j]) {          return false;        }      }    }    return true;  }}