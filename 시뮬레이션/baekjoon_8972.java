import java.util.HashSet;import java.util.LinkedList;import java.util.Objects;import java.util.Queue;import java.util.Scanner;import java.util.Set;class Arduino {  private int num;  private int y;  private int x;  private boolean isMovable = true;  public Arduino(int num, int y, int x) {    this.num = num;    this.y = y;    this.x = x;  }  public void move(int d) {    if (num == 0) {      y = y + baekjoon_8972.JONGSOO_DY[d];      x = x + baekjoon_8972.JONGSOO_DX[d];      return;    }    baekjoon_8972.map[y][x].remove(this);    y = y + baekjoon_8972.ARDUINO_DY[d];    x = x + baekjoon_8972.ARDUINO_DX[d];    baekjoon_8972.map[y][x].add(this);  }  public void breakDown() {    this.isMovable = false;  }  public int getY() {    return y;  }  public int getX() {    return x;  }  public boolean isMovable() {    return isMovable;  }  @Override  public boolean equals(Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    Arduino arduino = (Arduino) o;    return num == arduino.num;  }  @Override  public int hashCode() {    return Objects.hash(num);  }}public class baekjoon_8972 {  public static final Scanner SC = new Scanner(System.in);  public static final int ARDUINO_DIRECTION_SIZE = 8;  public static final int ARDUINO_DY[] = {0, 1, 1, 1, 0, 0, -1, -1, -1};  public static final int ARDUINO_DX[] = {0, -1, 0, 1, -1, 1, -1, 0, 1};  public static final int JONGSOO_DIRECTION_SIZE = 9;  public static final int JONGSOO_DY[] = {0, 1, 1, 1, 0, 0, 0, -1, -1, -1};  public static final int JONGSOO_DX[] = {0, -1, 0, 1, -1, 0, 1, -1, 0, 1};  public static Queue<Arduino> map[][];  public static Set<Arduino> arduinos = new HashSet<>();  public static Arduino jongsooArduino;  public static void main(String[] args) {    String[] input = SC.nextLine().split(" ");    int R = Integer.parseInt(input[0]);    int C = Integer.parseInt(input[1]);    initMap(R, C);    if (solve()) {      return;    }    printMap(R, C);  }  private static void initMap(int R, int C) {    map = new LinkedList[R + 1][C + 1];    for (int i = 1; i <= R; i++) {      for (int j = 1; j <= C; j++) {        map[i][j] = new LinkedList<>();      }    }    int num = 1;    for (int i = 1; i <= R; i++) {      String[] input = SC.nextLine().split("");      for (int j = 1; j <= C; j++) {        String value = input[j - 1];        if (value.equals(".")) {          continue;        }        if (value.equals("I")) {          jongsooArduino = new Arduino(0, i, j);        } else if (value.equals("R")) {          arduinos.add(new Arduino(num++, i, j));        }      }    }  }  private static boolean solve() {    String[] input = SC.nextLine().split("");    for (int i = 0; i < input.length; i++) {      jongsooArduino.move(Integer.parseInt(input[i]));      if (gameOver()) {        System.out.print("kraj " + (i + 1));        return true;      }      if (moveCrazyArduino() == -1) {        System.out.print("kraj " + (i + 1));        return true;      }      detonate();    }    return false;  }  private static boolean gameOver() {    return map[jongsooArduino.getY()][jongsooArduino.getX()].size() >= 1;  }  private static int moveCrazyArduino() {    for (Arduino arduino : arduinos) {      if (arduino.isMovable()) {        int result[] = getClosestDirection(arduino.getY(), arduino.getX());        int direction = result[0];        int distance = result[1];        if (distance == 0) {          return -1;        }        arduino.move(direction);      }    }    return 0;  }  private static int[] getClosestDirection(int y, int x) {    int direction = 0;    int distance = 987654321;    for (int i = 1; i <= ARDUINO_DIRECTION_SIZE; i++) {      int ny = y + ARDUINO_DY[i];      int nx = x + ARDUINO_DX[i];      int d = Math.abs(ny - jongsooArduino.getY()) + Math.abs(nx - jongsooArduino.getX());      if (d < distance) {        distance = d;        direction = i;      }    }    return new int[]{direction, distance};  }  private static void detonate() {    for (Arduino arduino : arduinos) {      if (arduino.isMovable()) {        Queue<Arduino> queue = map[arduino.getY()][arduino.getX()];        if (queue.size() >= 2) {          while (!queue.isEmpty()) {            Arduino a = queue.poll();            a.breakDown();          }        }      }    }  }  private static void printMap(int R, int C) {    String map[][] = new String[R + 1][C + 1];    for (int i = 1; i <= R; i++) {      for (int j = 1; j <= C; j++) {        map[i][j] = ".";      }    }    for (Arduino arduino : arduinos) {      if (arduino.isMovable()) {        map[arduino.getY()][arduino.getX()] = "R";      }    }    map[jongsooArduino.getY()][jongsooArduino.getX()] = "I";    for (int i = 1; i <= R; i++) {      for (int j = 1; j <= C; j++) {        System.out.print(map[i][j]);      }      System.out.println();    }  }}